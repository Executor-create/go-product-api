// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q               = new(Query)
	Category        *category
	GeneratedReview *generatedReview
	Product         *product
	ProductCategory *productCategory
	Review          *review
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Category = &Q.Category
	GeneratedReview = &Q.GeneratedReview
	Product = &Q.Product
	ProductCategory = &Q.ProductCategory
	Review = &Q.Review
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:              db,
		Category:        newCategory(db, opts...),
		GeneratedReview: newGeneratedReview(db, opts...),
		Product:         newProduct(db, opts...),
		ProductCategory: newProductCategory(db, opts...),
		Review:          newReview(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Category        category
	GeneratedReview generatedReview
	Product         product
	ProductCategory productCategory
	Review          review
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:              db,
		Category:        q.Category.clone(db),
		GeneratedReview: q.GeneratedReview.clone(db),
		Product:         q.Product.clone(db),
		ProductCategory: q.ProductCategory.clone(db),
		Review:          q.Review.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:              db,
		Category:        q.Category.replaceDB(db),
		GeneratedReview: q.GeneratedReview.replaceDB(db),
		Product:         q.Product.replaceDB(db),
		ProductCategory: q.ProductCategory.replaceDB(db),
		Review:          q.Review.replaceDB(db),
	}
}

type queryCtx struct {
	Category        ICategoryDo
	GeneratedReview IGeneratedReviewDo
	Product         IProductDo
	ProductCategory IProductCategoryDo
	Review          IReviewDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Category:        q.Category.WithContext(ctx),
		GeneratedReview: q.GeneratedReview.WithContext(ctx),
		Product:         q.Product.WithContext(ctx),
		ProductCategory: q.ProductCategory.WithContext(ctx),
		Review:          q.Review.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
